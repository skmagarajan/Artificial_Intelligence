/*
 * Class that defines the agent function.
 * 
 * Written by James P. Biagioni (jbiagi1@uic.edu)
 * for CS511 Artificial Intelligence II
 * at The University of Illinois at Chicago
 * 
 * Last modified 2/19/07 
 * 
 * DISCLAIMER:
 * Elements of this application were borrowed from
 * the client-server implementation of the Wumpus
 * World Simulator written by Kruti Mehta at
 * The University of Texas at Arlington.
 * 
 */

import java.util.Random;

class AgentFunction {
	
	// string to store the agent's name
	// do not remove this variable
	private String agentName = "Agent Smith";
	
	// all of these variables are created and used
	// for illustration purposes; you may delete them
	// when implementing your own intelligent agent
	private int[] actionTable;
	private boolean bump;
	private boolean glitter;
	private boolean breeze;
	private boolean stench;
	private boolean scream;
	private Random rand;

	private int agent_pos_x = 0;
	private int agent_pos_y = 0;
	String[][] track = new String[4][4];
	int[][] visited = new int[4][4];
	private String dir = "East";
	private String ShootFlag = "Not Yet";
	private int breezeFlag = 0;

	public AgentFunction()
	{
		// for illustration purposes; you may delete all code
		// inside this constructor when implementing your 
		// own intelligent agent

		// this integer array will store the agent actions
		actionTable = new int[8];
				  
		actionTable[0] = Action.NO_OP;
		actionTable[1] = Action.GO_FORWARD;
		actionTable[2] = Action.GO_FORWARD;
		actionTable[3] = Action.GO_FORWARD;
		actionTable[4] = Action.TURN_RIGHT;
		actionTable[5] = Action.TURN_LEFT;
		actionTable[6] = Action.GRAB;
		actionTable[7] = Action.SHOOT;
		
		// new random number generator, for
		// randomly picking actions to execute
		rand = new Random();

		for(int i=0;i<4;i++){
			for(int j=0;j<4;j++){
				if(i==0 && j==0){
					track[i][j]="Safe";
					visited[i][j] = 1;
				}
				else{
					track[i][j]="NA";
					visited[i][j] = 0;
				}

			}
		}
	}

	public void printSafe(){
		System.out.println(dir);
		System.out.println(agent_pos_x+"X::Y"+agent_pos_y);
		for(int i=0;i<4;i++){
			for(int j=0;j<4;j++){
				System.out.println(i+","+j+": "+track[i][j]);
				//System.out.println(i+","+j+": "+visited[i][j]);
			}
		}
	}

	public void moveForwardUpdate(String dir){
		if(dir == "East" && agent_pos_x < 3)
			agent_pos_x = agent_pos_x+1;
		if(dir == "North" && agent_pos_y < 3)
			agent_pos_y = agent_pos_y+1;
		if(dir == "West" && agent_pos_x > 0)
			agent_pos_x = agent_pos_x-1;
		if(dir == "South" && agent_pos_y > 0)
			agent_pos_y = agent_pos_y-1;
		visited[agent_pos_x][agent_pos_y] = 1;
		track[agent_pos_x][agent_pos_y] = "Safe";
		printSafe();
	}

	public boolean checkMove(String dir){
		if(dir == "North" && agent_pos_x-1>=0){
			if(visited[agent_pos_x-1][agent_pos_y] == 1){
				return true;
			}
		}
		return false;
	}

	public void UpdateNotSafe(String dir){
		if(dir == "East"){
			if(agent_pos_x+1 <= 3){
				if(visited[agent_pos_x+1][agent_pos_y] == 0){
					track[agent_pos_x+1][agent_pos_y] = "Not Safe";
				}
			}
			if(agent_pos_y+1 <= 3){
				if(visited[agent_pos_x][agent_pos_y+1] == 0){
					track[agent_pos_x][agent_pos_y+1] = "Not Safe";
				}
			}
		}
	}

	public int process(TransferPercept tp)
	{
		// To build your own intelligent agent, replace
		// all code below this comment block. You have
		// access to all percepts through the object
		// 'tp' as illustrated here:
		
		// read in the current percepts
		bump = tp.getBump();
		glitter = tp.getGlitter();
		breeze = tp.getBreeze();
		stench = tp.getStench();
		scream = tp.getScream();

		if(glitter == true){
			return actionTable[6];
		}

//		if(breeze == true && agent_pos_x == 0 && agent_pos_y == 0){
//			return actionTable[0];
//		}

		if(bump == true && breezeFlag == 0){
			if(dir == "East"){
				dir = "North";
				return actionTable[5];
			}
			else if(dir == "North"){
				dir = "West";
				return actionTable[5];
			}
			else if(dir == "West"){
				dir = "South";
				return actionTable[5];
			}
			else if(dir == "South"){
				dir = "East";
				return actionTable[5];
			}
		}

		if(bump == true && breezeFlag == 1){
			if(dir == "West"){
				dir = "North";
				return actionTable[4];
			}
			if(dir == "North"){
				dir = "East";
				return actionTable[4];
			}
			if(dir == "East"){
				dir = "South";
				return actionTable[4];
			}
			if(dir == "South"){
				dir = "West";
				return actionTable[4];
			}
		}

		if(scream == true){
			moveForwardUpdate(dir);
			return actionTable[1];
		}

		if(stench!=true && breeze!=true){
			moveForwardUpdate(dir);
			return actionTable[1];
		}

		if(breezeFlag == 1){
			if(agent_pos_x-1 >= 0){
				if(dir == "West" && visited[agent_pos_x-1][agent_pos_y] == 1){
					moveForwardUpdate(dir);
					return actionTable[1];
				}
			}

			if(agent_pos_y-1 >=0){
				if(dir == "South" && visited[agent_pos_x][agent_pos_y-1] == 1){
					moveForwardUpdate(dir);
					return actionTable[1];
				}
			}

			if(agent_pos_x+1 <=3){
				if(dir == "East" && visited[agent_pos_x+1][agent_pos_y] == 1){
					moveForwardUpdate(dir);
					return actionTable[1];
				}
			}

			if(agent_pos_y+1 <=3){
				if(dir == "North" && visited[agent_pos_x][agent_pos_y+1] == 1){
					moveForwardUpdate(dir);
					return actionTable[1];
				}
			}

		}

		if(breeze == true && stench != true){
			if(dir == "East"){
				breezeFlag = 1;
				//UpdateNotSafe(dir);
				dir = "North";
				return actionTable[5];
			}
			if(dir == "North"){
				breezeFlag = 1;
				dir = "West";
				return actionTable[5];
			}
			if(dir == "West"){
				breezeFlag = 1;
				dir = "South";
				return actionTable[5];
			}
			if(dir == "South"){
				breezeFlag = 1;
				dir = "East";
				return actionTable[5];
			}
		}

		if(stench == true && breeze!=true){
			return actionTable[7];
		}
		
		// return action to be performed
	    return actionTable[0];
	}
	
	// public method to return the agent's name
	// do not remove this method
	public String getAgentName() {
		return agentName;
	}
}
